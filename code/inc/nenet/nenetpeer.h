#ifndef N_ENETPEER_H
#define N_ENETPEER_H
//------------------------------------------------------------------------------
/* Copyright (c) 2003 Bruce Mitchener, Jr.
 *
 * See the file "nenet_license.txt" for information on usage and
 * redistribution of this file, and for a DISCLAIMER OF ALL WARRANTIES.
 */
//------------------------------------------------------------------------------
/**
    @class nENetPeer
    @ingroup NENetContribModule
    @brief Wrap an ENetPeer object.

    (C) 2003 Bruce Mitchener, Jr.
*/
#include <enet/enet.h>

#ifndef N_ROOT_H
#include "kernel/nroot.h"
#endif

#undef N_DEFINES
#define N_DEFINES nENetPeer
#include "kernel/ndefdllclass.h"
//------------------------------------------------------------------------------
class N_PUBLIC nENetPeer : public nRoot
{
public:
    /// constructor
    nENetPeer();
    /// destructor
    ~nENetPeer();

    /// object persistence
    virtual bool SaveCmds(nPersistServer *ps);

    /** Ping remote peer. 
	    Stores the result in the roundTripTime field in the ENetPeer structure. 
		Enet automatically pings all connected peers at regular intervals, 
		however, this function may be called to ensure more frequent ping requests.
	*/
    void Ping();

    /** Reset the connection 
	    The foreign host represented by the peer is not notified of the 
		disconnection and will timeout on its connection to the local host.
	*/
    void Reset();

    /** Disconnect from remote peer.
	    An NENET_EVENT_DISCONNECT event will be generated by host.service() 
		once the disconnection is complete. 
		Any packets that arrive until the disconnection completes will still 
		be received as if peer were still connected.
	*/
    void Disconnect();
    /** Send data using a channel.
	    flags: 0 not reliable or ENET_PACKET_FLAG_RELIABLE reliable packet (must arrive)
	*/
    int Send(int channel, unsigned char * data, unsigned int length, int flags);
    
	/** Unreliable packets are dropped by ENet in response to the varying conditions of
	the Internet connection to the peer. The throttle represents a probability that an 
	unreliable packet should not be dropped and thus sent by ENet to the peer. 
	The lowest mean round trip time from the sending of a reliable packet to the 
	receipt of its acknowledgement is measured over an amount of time specified by the
	interval parameter in milliseconds. If a measured round trip time happens to be 
	significantly less than the mean round trip time measured over the interval, then
	the throttle probability is increased to allow more traffic by an amount specified
	in the acceleration parameter, which is a ratio to the ENET_PEER_PACKET_THROTTLE_SCALE
	constant. If a measured round trip time happens to be significantly greater than the 
	mean round trip time measured over the interval, then the throttle probability is 
	decreased to limit traffic by an amount specified in the deceleration parameter, which
	is a ratio to the ENET_PEER_PACKET_THROTTLE_SCALE constant. When the throttle has a 
	value of ENET_PEER_PACKET_THROTTLE_SCALE, on unreliable packets are dropped by ENet, 
	and so 100% of all unreliable packets will be sent. When the throttle has a value of 0, 
	all unreliable packets are dropped by ENet, and so 0% of all unreliable packets will be sent.
	Intermediate values for the throttle represent intermediate probabilities between 0% and 
	100% of unreliable packets being sent. The bandwidth limits of the local and foreign 
	hosts are taken into account to determine a sensible limit for the throttle probability 
	above which it should not raise even in the best of conditions.

    Parameters:
       peer 			peer to configure
       interval 		interval, in milliseconds, over which to measure lowest mean RTT; the default value is ENET_PEER_PACKET_THROTTLE_INTERVAL.
       acceleration 	rate at which to increase the throttle probability as mean RTT declines
       deceleration 	rate at which to decrease the throttle probability as mean RTT increases
	*/
	void ConfigureThrottle(int interval, int acceleration, int deceleration);

	/** Set internal eNet peer */
    void SetRawPeer(ENetPeer *);
	/** Get internal eNet peer */
    ENetPeer * GetRawPeer(void);

    /// nKernelServer dependency.
    static nKernelServer* kernelServer;


private:
    ENetPeer * peer;
};
#endif /* N_ENETPEER_H */
